samarth 
ravi
pavan
A.krishnavamshi
MH.Krishnavamshi
suhani
chagan
yash
salik
pratyush
nahush
krishtoper
atul
shashank
harsh
deepak gowtham
muhnis
adil
shiv gupta
mohit







LANGUAGE

Programming Lanaguage

Identifiers

Execution Flow 
			javac filename.java
			compiler
	.java	------------->.class------->JVM byte code
	...		compailation	java classname
	...
	...
	...

datatypes

variables

	local variables
	global variables
			intsance
			static
	
	JVM Architecture:
	================
	java classname
	
	
	JVM 	int a=123;
	
					      CLSS
			loading   	linking     		intialization	
			3			bytecode verifier     
	
			Memory Areas
			
		   method area heap area   stack area  pc register native methodstack	
			
			
			Execution Engine
			
	Instance and static:
	=======================
	1)syntax
		we will use static keyword for static properties
		if there is no staic i.e instance (non-static)
	
	
	2)memory		java classname
		static properties will get memory only once when class loading into JVM
		instance properties will get memory at the time of object creation
		
			class  A
			
			object A obj=new A();
			
			classname objname=new classname();
			
			
	3)access
			we can access static properties by using classname
			we can access instance properties by using objname
	
	4)when to use
			we can use static for common properties like countryname,schoolname,orgname...
			we can use instance for unique properties like eid,email,contact,aadhar,pan,....
	
	
	
	
	
	Method signature:
	================
	accessmodifier returntype methodname(parameters)
	{
	....	
	}
	
	
	oops
		Inheritance			extends,implements
				single level			parent-->child	
				multi level				grandparent-->parent--->child
				hirarchie level			parent -->many child
				hybrid level			any two inheritance levels
				multiple level			many parents -->one child	
				
	Note:
		MI is Not Supoorted by java through classes
				
				interface Parent	interface Parent1
				{						{
				m1();				m1();

				}						}
				
				class Child implements Parent,Parent1
				{
				Child ch=new Child();
				ch.m1();
				
				
				m1()
				{
				
				}
				}
				
				
	abstraction	
	
		methods
			concrete methods
			abstract methods	:method with out body/implementation
			
			public void m1()
			{
			...
			...
			}
			public abstract void m2();
			
			
			
			
		class		  : class is collection of only concrete methods	
		0-100% abstract class: abstract class is a combination of both concrete+abstract
		 100% interfaces	  : interface is a collection of only abstract methods
	
		
		polymorphisam
		
		Abstraction
		Encapsulation
	
NOTE:
		1)By default package for every java file java.lang
		2)By default parent class for every java class is java.lang.Object
	
	
	
	
	exception handling
	
	
	collections
	
	
	multi threading
	
	
	database
	
stage-2	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

























