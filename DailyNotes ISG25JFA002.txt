samarth  :instance and static ,oops,access modifiers,this,super,constructor
ravi       :execution flow,exception handling,oops
pavan		:arrays,collections,execution flow
A.krishnavamshi :instance and static and access modifiers ,this,super,final,constructor
MH.Krishnavamshi:exception handling ,collections
suhani	     : this,super,object,class,final,accesss modifiers
chagan		 :instance and static and exception handling
yash		 :oops and collections
salik		 :oops,exception handling
pratyush	 :execution flow,oops
nahush       :execution flow,instance and static 
krishtoper   :oops,instance and static
atul		:java8 features 
shashank      :multithreading
harsh		  :	oops(inheritance,this,super,final,constructor)
deepak gowtham:exception handling
muhnis    :instance and static and oops
adil	  :oops,exception handling
shiv gupta: collections and concurrent collections
mohit :java8 features and concurrent collections







LANGUAGE

Programming Lanaguage

Identifiers

Execution Flow 
			javac filename.java
			compiler
	.java	------------->.class------->JVM byte code
	...		compailation	java classname
	...
	...
	...

datatypes

variables

	local variables
	global variables
			intsance
			static
	
	JVM Architecture:
	================
	java classname
	
	
	JVM 	int a=123;
	
					      CLSS
			loading   	linking     		intialization	
			3			bytecode verifier     
	
			Memory Areas
			
		   method area heap area   stack area  pc register native methodstack	
			
			
			Execution Engine
			
	Instance and static:
	=======================
	1)syntax
		we will use static keyword for static properties
		if there is no staic i.e instance (non-static)
	
	
	2)memory		java classname
		static properties will get memory only once when class loading into JVM
		instance properties will get memory at the time of object creation
		
			class  A
			
			object A obj=new A();
			
			classname objname=new classname();
			
			
	3)access
			we can access static properties by using classname
			we can access instance properties by using objname
	
	4)when to use
			we can use static for common properties like countryname,schoolname,orgname...
			we can use instance for unique properties like eid,email,contact,aadhar,pan,....
	
	
	
	
	
	Method signature:
	================
	accessmodifier returntype methodname(parameters)
	{
	....	
	}
	
	
	oops
		Inheritance			extends,implements
				single level			parent-->child	
				multi level				grandparent-->parent--->child
				hirarchie level			parent -->many child
				hybrid level			any two inheritance levels
				multiple level			many parents -->one child	
				
	Note:
		MI is Not Supoorted by java through classes
				
				interface Parent	interface Parent1
				{						{
				m1();				m1();

				}						}
				
				class Child implements Parent,Parent1
				{
				Child ch=new Child();
				ch.m1();
				
				
				m1()
				{
				
				}
				}
				
				
	abstraction	
	
		methods
			concrete methods
			abstract methods	:method with out body/implementation
			
			public void m1()
			{
			...
			...
			}
			public abstract void m2();
			
			
			
			
		class		  : class is collection of only concrete methods	
		0-100% abstract class: abstract class is a combination of both concrete+abstract
		 100% interfaces	  : interface is a collection of only abstract methods
	
		
		polymorphisam
		
		Abstraction
		Encapsulation
	
NOTE:
		1)By default package for every java file java.lang
		2)By default parent class for every java class is java.lang.Object
	
	Polymorphisam:
	==============
		many forms
		
		method overloading
			method name is same signature is different
									no of params
									order of params
									type of params
		
		
		
		method overriding
			method name is same implementation is different
	
	
	
	class ChristopherParents{
			public void properties(){
				sop("1000 crores ")
			}
			public void marriage(){
				sop("x")
			}
	
	}
	
	class Christopher {
	@Override
	public void marriage(){
				sop("Y")
			}
	}
	public(everywhere)
	private(class level)
	protected(inside package and outside packeg when child)
	default(package level)
	
	Encapsulation:
	==============
		it is a process binding the data and its methods together
	
	
			data must be private
			methods must be public
			
	exception handling:
	===================
		1.system defined error messages
		2.abnormal termination
		
		try,catch,finally,throw,throws
		
						Throwable
		
		
		
		
		
		
		
		
		
		
					error
					
					compile time error
					runtime error-->exceptions
					
					
			
			
					
					
		
		
		
			1
			2--->stop 
			3
			4
			5
			6
			
			1000
		
	
	
	String,StringBuffer,StringBuilder
	
	synchronized
	
	
	public void m1()
	{
	
	}
	public synchronized void m2()
	{
	
	}
	
	t1 t2 t3
	
	Object class methods
	
		variable
		
		String name="sandeep";
		
		Array:
		String names[]=new String[10]

		1)no predefined methods
		2)fixed in size
		3)homogeneous
		
		
		
	collections:
	===========
		1)lots of utility methods
		2)not fixed in size/growable in nature   AL->10-->16->(cc*3/2)+1
		3)both homogeneous and haterogeneous object can store
		
				Object
				Throwable
				Collection
		
		List:
			duplicates are allowed
			insertion order is preserved
			
				Al
				LL
				Vector
				Stack
		
		
		
		Multi threading
		concurrent collections
		java8 features
		
		
		variables:
		arrays:similar,fixed size,no methods
	collections:
		
					Collection
			List     			Set       Queue		
1)duplicates are allowed
2)insertion order preserved	
		
		
		
		MAP
		
	HM-->entry
	LHM-->
	TM--->keys
		
	
	multi threading
		
		Multi Tasking 
			Process based  multitasking:executing several tasks simultaniously where each and every task is seperate independent process
			thread based multitasking
			
			
			1)implements Runnable (I)-->run()
			2)extends Thread
			3)implements Callable(FI)  call()
			
			
			-->wait,notify,notifyAll
			
			class Employee implements Runnable
			{
			
			run()
			{
			
			
			}
			
			}
		
	
	database
	========

	
	
	Spring:
	=======
	Framework
	maven,gradle-->pom.xml--><project><dependencies><dependency>
		-->jars-->dependencies
	
		-->central
	.m2-->local repository
	
	Spring is a non-invasive framework,which is used to create light weight and loosley coupled applications
	
	
	
			non-invasive :will never force to implement predefined API,spring,hibernate
			invasive:will force developer to implemente predefined api,struts
			
			
			light weight
			heavy weight
			
			loosley coupled
			tightly coupled
	
	
	
	Servlet -->EJB-->Rod Johnson-->interface21-->spring -->2003
	
		1 implement Servlet
		2 extends GernricServlet
		3 extends HttpServlet-->12 methods
		1*12
		1000*12==12000
		class Login extends HttpServlet{
		
		
		
		
		}
	
	
		class Employee{
		
		Employee(String ename){
		
		}
		
		}
	
		class Client{
		
		main()
		{
		//Employee emp=new Employee();spring container -->BeanFactory,ApplicationContext
		emp.set,,....
		}
		
		
		container is going to perform entire life cycle of an object
					creation 
					wiring
					configuring
					destroying
		
		spring modules
		20+
		spring core--->dependency injection module
		
				setter injection--><property>
				constructor injection-->
				autowiring
				
				
		spring jdbc
		spring jpa
		spring mvc
		spring aop
		spring cloud
		spring Rest
		..
		..
		..
		..
		
		
		Employee
						configuration	--->XML,Annotation,java 
				
				Spring container
		
		
		Client
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

























